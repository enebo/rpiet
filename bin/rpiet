#!/usr/bin/env ruby

require 'optparse'
require 'rpiet'

run = :chowder
time_execution = false
codel_size = 1

dump = nil

log = RPiet::Logger::NoOutput
opts = OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} -d image_file"

  opts.on("-t", "--time", "time execution") { time_execution = true }
  opts.on("-r", "--runtime runtime") do |runtime|
    run = case runtime
          when 'graph' then :graph
          when 'ir' then :ir
          when 'cfg' then :cfg
          when 'chowder' then :chowder
          else raise ArgumentError.new("invalid runtime specified: #{runtime}")
          end

  end
  opts.on("-I", "--dump-ir", "Dump image as IR instructions") { run = :ir; dump = :ir }
  opts.on("-d", "--debug style", "turn on debugging") do |style|
    log = case style
          when 'simple' then RPiet::Logger::SimpleAsciiOutput
          when 'complex' then RPiet::Logger::ComplexAsciiOutput
          when 'graphical' then RPiet::Logger::Graphical
          else raise ArgumentError.new("invalid logger specified: #{style}")
          end
  end
  opts.on("-c", "--codel-size w", "size of codel") { |w| codel_size = w.to_i }
end

opts.parse!(ARGV)
unless ARGV.first
  puts "You need to supply a source image filename."
  puts opts
  exit -1
end

filename = ARGV.first

if filename =~ /.txt/
  require 'rpiet/image/ascii_image'
  image = RPiet::Image::AsciiImage.new(File.read(filename), codel_size)
elsif filename == '-'
  require 'rpiet/image/ascii_image'
  image = RPiet::Image::AsciiImage.new($stdin.gets(nil), codel_size)
else
  filename = 'file:' + filename if File.exist? filename
  require 'rpiet/image/url_image'
  image = RPiet::Image::URLImage.new(filename, codel_size)
end


runner = case run
         when :graph
           require 'rpiet/asg/graph_interpreter'
           RPiet::ASG::GraphInterpreter.new(image, log.new)
         when :ir
           require 'rpiet/ir/ir_interpreter'
           RPiet::IR::IRInterpreter.new(image, log.new)
         when :cfg
           require 'rpiet/ir/ir_cfg_interpreter'
           RPiet::IR::IRCFGInterpreter.new(image, log.new)
         else
           RPiet::Interpreter.new(image, log.new)
         end

if dump == :ir
  puts runner.disasm
else
  start = Time.now if time_execution
  runner.run
  puts "time: #{Time.now - start}s" if time_execution
end

exit 0
